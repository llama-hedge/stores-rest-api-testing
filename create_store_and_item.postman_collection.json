{
	"info": {
		"_postman_id": "0bb201c0-ffd6-4135-8736-d9150b4489ef",
		"name": "User create store and item",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/register",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a92f8a8-e813-4a1c-b7a5-8b834c24933a",
						"exec": [
							"postman.clearEnvironmentVariable(\"access_token\");",
							"",
							"tests[\"Response time is less that 200ms\"] = responseTime < 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"User created successfully\"] = jsonData.message === \"User created successfully\";",
							"",
							"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');",
							"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"user1\",\n\t\"password\": \"12345\"\n}"
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				},
				"description": "registers a user"
			},
			"response": []
		},
		{
			"name": "/auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c1c09cfe-edc9-42e5-a65f-7d7d190c922d",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
							"",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Body contains access_token\"] = responseBody.has(\"access_token\");",
							"",
							"tests[\"Response time is less that 150ms\"] = responseTime < 150;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "JWT",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"user1\",\n\t\"password\": \"12345\"\n}"
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/test_store",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef85f0bd-bcc5-48c3-aab8-ed1b5e30c60b",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Store name is return\"] = jsonData.name === \"test_store\";",
							"tests[\"Store id is returned\"] = jsonData.id === 1;",
							"tests[\"Store items are an empty list\"] = jsonData.items.length === 0;",
							"",
							"tests[\"Sucessful POST request\"] = responseCode.code === 201;",
							"tests[\"Response time is less than 200ms\"] - responseTime < 200;",
							"",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';",
							"",
							"postman.setEnvironmentVariable(\"store_id\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/store/test_store",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"test_store"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/test_item in test_store",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8097ae32-d5f4-445c-87ee-7ea2b92f4470",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Item name is returned\"] - jsonData.name === \"test_item\";",
							"tests[\"Item price is returned\"] = jsonData.price === 20;",
							"tests[\"Successful POST request\"] = responseCode.code === 201;",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"price\": 20,\n\t\"store_id\": {{store_id}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/item/test_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"test_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "/stores",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "727da727-f2b9-4e09-82a8-7d52cee08610",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Store 'test_store' is returned\"] = jsonData.stores[0].name === \"test_store\";",
							"tests[\"ID of store 'test_store' is returned\"] = jsonData.stores[0].id = parseInt(environment.store_id);",
							"tests[\"Item 'test_item' is return inside 'test_store'\"] = jsonData.stores[0].items[0].price === 20;",
							"",
							"tests[\"Response time is less than 200\"] = responseTime < 200;",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/stores",
					"host": [
						"{{url}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/my_item",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "235f4274-4864-4b51-b1a7-8d88283470be",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"message is returned\"] = jsonData.message === 'Item deleted';",
							"tests[\"Successful POST request\"] = responseCode.code === 200;",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/item/my_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"my_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/test_store",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c24c662-391e-4a58-9514-dcaeba51de35",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"message is returned\"] = jsonData.message === 'Store deleted';",
							"tests[\"Successful POST request\"] = responseCode.code === 200;",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/store/<name>",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"<name>"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}